#include "HelloWorldScene.h"
#include "String.h"
#include "stdlib.h"
//#include "tools.h"
USING_NS_CC;

#include "RoleView.h"
#include "PPMapData.h"
#include "PPUnitPool.h"
#include "PPEngine.h"
#include "Json.h"
#include "value.h"
#include "reader.h"
#include "writer.h"
#include "global.h"
#include "Trigger.h"
#include "spine-cocos2dx.h"
using namespace spine;
CCLayerColor *HelloWorld::bg=NULL;
CCParallaxNode *HelloWorld::pNode=NULL;
HelloWorld::HelloWorld():_tick(0),_tStep(1),_collisionRadius(45*3.14/180),power(0),_direct(1),kg(true)
{
	
}
HelloWorld::~HelloWorld(){}
CCScene* HelloWorld::scene()
{
    
    CCScene * scene = NULL;
    do 
    {
        // 'scene' is an autorelease object
        scene = CCScene::create();
        CC_BREAK_IF(! scene);

        
        // 'layer' is an autorelease object
        HelloWorld *layer = HelloWorld::create();
       
        CC_BREAK_IF(!layer);
        bg=CCLayerColor::create(ccc4(3,20,0,255));
        
        
        
        
        pNode=CCParallaxNode::create();
        
        
        
        CCSprite *ss=CCSprite::createWithSpriteFrame(getSpriteFrameByName("image1.png"));
        ss->setScale(3);
        pNode->addChild(ss,-1,ccp(.5,.005), ccp(ss->getContentSize().width/2,ss->getContentSize().height/2));
        
        bg->addChild(pNode);

        
        scene->addChild(bg);
       // scene->addChild(test);
        scene->addChild(layer);
    } while (0);

    // return the scene
    return scene;
};
void HelloWorld::onEnter()
{
    CCLayer::onEnter();
    CCDirector::sharedDirector()->getTouchDispatcher()->addStandardDelegate(this, 0);
    CCDirector::sharedDirector()->getTouchDispatcher()->addTargetedDelegate(this, 0, true);
};
void HelloWorld::onExit()
{
    CCLayer::onExit();
};

void HelloWorld::ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent)
{
    
   // power+=10;
    
};
void HelloWorld::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)
{
    role->setAnimation("fly",false);
    role->timeScale=.5f;
    _nowPoint=pTouch->getLocation();
    _tick=0;
    _startY=role->getPositionY();
    float tx=powf((_nowPoint.x-_lastPoint.x),2);
    float ty=powf((_nowPoint.y-_lastPoint.y),2);
    
    int dis=int(ceil(sqrt(tx+ty)));
    _collisionRadius=atan2f(_nowPoint.y-_lastPoint.y, _nowPoint.x-_lastPoint.x);
    role->setRotation(360-_collisionRadius*180/3.14f+70);
    
    
    _collisionRadius>0?_direct=1:_direct=-1;
    
    kg=true;
    if(_collisionRadius<0)_collisionRadius=-_collisionRadius;
//    dis=sin(radius)*dis;
//    if(dis<0)dir=-1;
    power=dis/5;
    role->stopAllActions();
    
    //role->runAction(CCRepeatForever::create(CCRotateBy::create(abs(int(radius*180/3.14f)),power*600)));
    CCLog("%d__%f",dis,_collisionRadius*180/3.14);
}
void HelloWorld::ccTouchMoved(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)
{
    
};
bool HelloWorld::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)
{
    _lastPoint=pTouch->getLocation();
   // power+=10;
    return true;
   
};
// on "init" you need to initialize your instance
bool HelloWorld::init()
{
     
   
    role = CCSkeletonAnimation::createWithFile("spineboy.json", "spineboy.atlas");
    
    CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile("role.plist");
    CCSpriteFrameCache::sharedSpriteFrameCache()->addSpriteFramesWithFile("items.plist");

    
       
	role->setMix("walk", "jump", 0.2f);
	role->setMix("jump", "walk", 0.4f);
    role->setMix("run", "fly", 0.4f);
    role->setMix("fly", "run", 1.0f);
	role->setAnimation("run", true);
    role->timeScale=2.0f;
    role->setTag(1000);
    
    //CCTexture2D *tt= CCTextureCache::sharedTextureCache()->textureForKey("14327330_13.png");
    st=CCMotionStreak::create(1.0f, 2.0f, 10.0f, ccc3(255,255,255), "white.png");
   // st->setBlendFunc({GL_BLEND_COLOR,GL_BLEND_SRC_ALPHA});
    
    this->addChild(st);
    
    pcl=CCParticleSystemQuad::create("lizi1.plist");
    pcl->setPositionType(kCCPositionTypeRelative);
    pcl->setEmitterMode(kCCParticleModeGravity);
    
    this->addChild(pcl);
	//role->timeScale = 1.0f;
	//role->debugBones = true;
    _startY=role->getPositionY();

    
	CCSize windowSize = CCDirector::sharedDirector()->getWinSize();
	role->setPosition(ccp(windowSize.width / 2, 20));
    role->setScale(.6f);
	//addChild(role);

    role->retain();
    
    
    fenshu=CCTextFieldTTF::create();
    fenshu->retain();
    CCSize win=CCDirector::sharedDirector()->getWinSize();
    fenshu->setPosition(CCPointMake(win.width/2,win.height/2));
    fenshu->setFontSize(100);
    fenshu->setOpacity(40);
    this->addChild(fenshu,1000);
    
    
    
    engine=PPEngine::create();
    engine->retain();
    engine->initWithMapFile("newMap.json", this);
    
    
        

    role->setAnchorPoint(CCPointMake(.5f,.258f));
    //role->setPosition(ccp(500,0));
    
    //role->runAction(CCRepeatForever::create(CCMoveBy::create(.15f, ccp(100,0))));
    role->setZOrder(0);
    
   
    
    CCFollow *ff=CCFollow::create(role);
    
    this->runAction(ff);

    this->addChild(role);

    //CCDirector::sharedDirector()->getScheduler()->setTimeScale(.5f);
    this->schedule(schedule_selector(HelloWorld::update),600/1000);
       return true;
};
void HelloWorld::enterFrame(cocos2d::CCObject *obj)
{
    
};
void HelloWorld::update(float dt)
{
    pNode->setPositionY(-role->getPositionY());
    float bl=role->states[0]->time/role->states[0]->animation->duration;
    if(strcmp(role->states[0]->animation->name,"fly") == 0&&bl>.6f&&power>1)
    {
        //CCLog("player over%s",role->states[0]->animation->name);
        //role->setAnimation("walk", false);
        role->setRotation(role->getRotation()+10);
    };
   
    bool bingo=false;
    this->sortAllChildren();
    
    float p=1-role->getPositionY()/100000.0;
    
    
    ccColor3B tc=ccc3(255,0,0);
    
    if(p<0)p=0;
        tc.r=(bgColor.color2.r-bgColor.color1.r)*p;
        tc.g=(bgColor.color2.g-bgColor.color1.g)*p;
        tc.b=(bgColor.color2.b-bgColor.color1.b)*p;
    

    if(power<8)
    {
        role->setPositionX(role->getPositionX()+15);
        role->setRotation(0);
        
        if(kg)
        {
            role->setAnimation("run",true);
            role->timeScale=2;
            
        }
         kg=false;
    }
    st->setPosition(role->getPosition());
    pcl->setPosition (role->getPosition());
    bg->setColor(tc);
	engine->update(role->getPositionX(), role->getPositionY(),_collisionRadius,bingo);

    if(bingo||role->getPositionY()<0)
    {
       // role->stopAllActions();
        role->setPositionY(0);
        _tick=0;
        _direct=1;
        power/=1.2;
        _startY=0;
        //power=abs(power);
        
        //if(radius<0)radius=-radius;
       
        
       
        //this->schedule(schedule_selector(HelloWorld::update),500/1000);
       
    }
    
    float ty=_direct*power*_tick*sin(_collisionRadius)-.098*_tick*_tick/2;
    float tx=role->getPositionX()+abs(int(power*cos(_collisionRadius)));
    role->setPositionX(tx);
    role->setPositionY(ty+_startY);
       
    CCString *tr=CCString::createWithFormat("%dç±³",int(role->getPositionX()/100));
    fenshu->setString(tr->getCString());
    fenshu->setPosition(role->getPosition());
        _tick+=_tStep;
};
void HelloWorld::menuCloseCallback(CCObject* pSender)
{
    // "close" menu item clicked
    CCDirector::sharedDirector()->end();
};

